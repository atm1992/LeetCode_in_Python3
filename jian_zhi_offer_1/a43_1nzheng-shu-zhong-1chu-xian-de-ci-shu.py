# -*- coding: UTF-8 -*-
"""
title: 1～n 整数中 1 出现的次数
输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。
例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。


示例 1：
输入：n = 12
输出：5

示例 2：
输入：n = 13
输出：6


限制：
1 <= n < 2^31

参考LeetCode题233
"""


class Solution:
    def countDigitOne(self, n: int) -> int:
        """
        最终结果可看做是 个位上的1出现次数 + 十位上的1出现次数 + 百位上的1出现次数 + ……
        以百位上的1出现次数为例：只有当 xx100 ~ xx199 会在百位上出现1，前面的xx表示会循环多少次。
        例如：假设n = 12345，则xx为12 = n // 1000，表示会出现12次完整的100 ~ 199，即 百位上会出现 12 * 100 次1
        另外，由于后面的345 = n % 1000大于等于199，表示还会出现一次完整的100 ~ 199，即 百位上1的出现次数为 12 * 100 + 100
        如果后面的余数m介于100 ~ 199，则余数在百位上1的出现次数为 m - 100 + 1
        其实，无论余数m是多少，余数在百位上1的出现次数都可写成：min(max(m - 100 + 1, 0), 100)
        """
        res = 0
        # 1 ——> 10 ——> 100 ——> ……
        mul_k = 1
        while n >= mul_k:
            res += n // (mul_k * 10) * mul_k + min(max(n % (mul_k * 10) - mul_k + 1, 0), mul_k)
            mul_k *= 10
        return res


if __name__ == '__main__':
    print(Solution().countDigitOne(13))
