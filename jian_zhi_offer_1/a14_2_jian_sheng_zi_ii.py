# -*- coding: UTF-8 -*-
"""
title: 剪绳子 II
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。


示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1

示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36


提示：
2 <= n <= 1000
"""


class Solution:
    def cuttingRope(self, n: int) -> int:
        """
        贪心。分成尽可能多的长度为3的小段，这样的乘积最大。通过数学推导出每段的最佳长度为自然底数e = 2.71828
        n == 2时，1 * 1 = 1，返回 n - 1
        n == 3时，1 * 2 = 2，返回 n - 1
        n == 4时，2 * 2 = 4
        n > 4时，分成尽可能多的长度为3的小段，每次循环时，长度n减去3，乘积res乘以3。退出循环后，再乘以小于等于4的最后一小段(此时的n<=4)
        """
        if n < 4:
            return n - 1
        res, mod = 1, 1000000007
        # 退出循环时，n的可能取值为：2、3、4
        while n > 4:
            # 循环求余
            res = res * 3 % mod
            n -= 3
        return res * n % mod
